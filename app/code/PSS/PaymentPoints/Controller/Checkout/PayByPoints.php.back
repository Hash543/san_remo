<?php
/**
 * @author Israel Yasis
 */
namespace PSS\PaymentPoints\Controller\Checkout;

use Magento\Framework\Exception\NoSuchEntityException;
use PSS\PaymentPoints\Model\Payment\PaymentPoints;
/**
 * Class PayByPoints
 */
class PayByPoints extends \Magento\Framework\App\Action\Action {
    /**
     * @var \Magento\Framework\Controller\Result\JsonFactory
     */
    protected $resultJsonFactory;
    /**
     * @var \Magento\Framework\Controller\Result\RawFactory
     */
    protected $resultRawFactory;

    /**
     * @var \Magento\Framework\Json\Helper\Data
     */
    protected $jsonHelper;

    /**
     * @var \Magento\Checkout\Model\Session
     */
    protected $checkoutSession;
    /**
     * @var \Mageplaza\RewardPoints\Helper\Calculation
     */
    protected $calculation;
    /**
     * @var \Magento\Quote\Api\CartTotalRepositoryInterface
     */
    protected $cartTotalRepository;
    /**
     * @var \Magento\Quote\Api\CartRepositoryInterface
     */
    protected $cartRepository;
    /**
     * @param \Magento\Framework\App\Action\Context $context
     * @param \Magento\Framework\Controller\Result\JsonFactory $resultJsonFactory
     * @param \Magento\Framework\Controller\Result\RawFactory $resultRawFactory
     * @param \Magento\Framework\Json\Helper\Data $jsonHelper
     * @param \Mageplaza\RewardPoints\Helper\Calculation $calculation
     * @param \Magento\Checkout\Model\Session $checkoutSession
     * @param \Magento\Quote\Api\CartRepositoryInterface $cartRepository
     * @param \Magento\Quote\Api\CartTotalRepositoryInterface $cartTotalRepository
     */
    public function __construct(
        \Magento\Framework\App\Action\Context $context,
        \Magento\Framework\Controller\Result\JsonFactory $resultJsonFactory,
        \Magento\Framework\Controller\Result\RawFactory $resultRawFactory,
        \Magento\Framework\Json\Helper\Data $jsonHelper,
        \Mageplaza\RewardPoints\Helper\Calculation $calculation,
        \Magento\Checkout\Model\Session $checkoutSession,
        \Magento\Quote\Api\CartRepositoryInterface $cartRepository,
        \Magento\Quote\Api\CartTotalRepositoryInterface $cartTotalRepository
    ) {
        parent::__construct($context);
        $this->resultJsonFactory = $resultJsonFactory;
        $this->resultRawFactory = $resultRawFactory;
        $this->jsonHelper = $jsonHelper;
        $this->checkoutSession = $checkoutSession;
        $this->calculation = $calculation;
        $this->cartTotalRepository = $cartTotalRepository;
        $this->cartRepository = $cartRepository;
    }
    /**
     * {@inheritdoc}
     */
    public function execute() {
        $params = null;
        $httpBadRequestCode = 400;
        /** @var \Magento\Framework\Controller\Result\Raw $resultRaw */
        $resultRaw = $this->resultRawFactory->create();
        try{
            $params = $this->jsonHelper->jsonDecode($this->getRequest()->getContent());
        } catch(\Exception $e){
            return $resultRaw->setHttpResponseCode($httpBadRequestCode);
        }
        if (!$params || $this->getRequest()->getMethod() !== 'POST' || !$this->getRequest()->isXmlHttpRequest()) {
            return $resultRaw->setHttpResponseCode($httpBadRequestCode);
        }
        $response = [
            'success' => true,
            'points' => 0
        ];
        $success = true;
        $quote = $this->checkoutSession->getQuote();
        if(!$this->calculation->isAllowSpending($quote)) {
            $result = $this->resultJsonFactory->create();
            return $result->setData($response);
        }
        try {
            $maxPoints = $this->calculation->getMaxSpendingPointsByRate($quote);
        } catch (NoSuchEntityException $noSuchEntityException) {
            $maxPoints = 0;
            $success = false;
        }
        if(isset($params['rule'])) {
            if(isset($params['paymentMethod']) && isset($params['paymentMethod']['method'])
                && $params['paymentMethod']['method'] == PaymentPoints::PAYMENT_METHOD_PAYMENT_POINTS) {
                $quote->setData('mp_reward_spent', $maxPoints)->setData('mp_reward_applied', $params['rule']);
            } else {
                $maxPoints = 0;
                $quote->setData('mp_reward_spent', $maxPoints)->setData('mp_reward_applied', $params['rule']);
            }
        } else {
            $maxPoints = 0;
        }
        try {
            $totals = $this->cartTotalRepository->get($quote->getId());
        }catch (NoSuchEntityException $noSuchEntityException) {
            $totals = [];
            $success = false;
        }
        $response = [
            'success' => $success,
            'points' => $maxPoints,
            'totals' => $totals
        ];
        $quote->collectTotals();
        $this->cartRepository->save($quote);
        $result = $this->resultJsonFactory->create();
        return $result->setData($response);
    }
}